name: 🚀 Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🏗️ Build and Push Docker Image
  build:
    name: 🏗️ Build and Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: 🏗️ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # 🧪 Staging Deployment
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment: staging
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d
        
    - name: 🧪 Run staging tests
      run: |
        echo "Running staging environment tests..."
        # Add staging-specific tests
        
    - name: 📊 Notify staging deployment
      run: |
        echo "✅ Staging deployment completed successfully!"
        echo "Image: ${{ needs.build.outputs.image }}"
        echo "Digest: ${{ needs.build.outputs.digest }}"

  # 🚀 Production Deployment
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    environment: production
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Setup production secrets
      run: |
        echo "Setting up production environment..."
        # Add production secret management
        
    - name: 🐳 Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.production.yml up -d
        
    - name: 🧪 Run production health checks
      run: |
        echo "Running production health checks..."
        # Add production health check logic
        
    - name: 📊 Notify production deployment
      run: |
        echo "🚀 Production deployment completed successfully!"
        echo "Version: ${{ github.ref_name }}"
        echo "Image: ${{ needs.build.outputs.image }}"
        echo "Digest: ${{ needs.build.outputs.digest }}"
        
    - name: 🏷️ Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        body: |
          🚀 Production deployment completed successfully!
          
          **Changes in this release:**
          - Automated deployment from CI/CD pipeline
          - Production-hardened algorithmic trading system
          - AI-powered analysis and decision making
          
          **Technical Details:**
          - Image: ${{ needs.build.outputs.image }}
          - Digest: ${{ needs.build.outputs.digest }}
          - Commit: ${{ github.sha }}
          
          **Deployment Status:** ✅ Success
        draft: false
        prerelease: false

  # 📊 Post-Deployment Monitoring
  monitor:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 📊 Run post-deployment tests
      run: |
        echo "Running post-deployment monitoring..."
        # Add monitoring and alerting logic
        
    - name: 📈 Update deployment metrics
      run: |
        echo "Updating deployment metrics..."
        # Add metrics collection
        
    - name: 🔔 Send deployment notification
      run: |
        echo "Sending deployment notification..."
        # Add notification logic (Slack, email, etc.)
