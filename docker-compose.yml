version: '3.8'

services:
  # Main Application
  app:
    build: .
    container_name: hedgefund-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://trading:trading123@db:5432/hedgefund
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - db
      - redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - hedgefund-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: hedgefund-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=hedgefund
      - POSTGRES_USER=trading
      - POSTGRES_PASSWORD=trading123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - hedgefund-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading -d hedgefund"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hedgefund-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hedgefund-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Dashboard (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: hedgefund-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - hedgefund-network
    depends_on:
      - prometheus

  # Metrics Collection (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: hedgefund-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - hedgefund-network

  # Log Aggregation (Loki)
  loki:
    image: grafana/loki:latest
    container_name: hedgefund-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/local-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - hedgefund-network

  # Log Collection (Promtail)
  promtail:
    image: grafana/promtail:latest
    container_name: hedgefund-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail/config.yml:/etc/promtail/config.yml
      - ./logs:/var/log
    networks:
      - hedgefund-network
    depends_on:
      - loki

  # Message Queue (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: hedgefund-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - hedgefund-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Task Worker (Celery)
  worker:
    build: .
    container_name: hedgefund-worker
    restart: unless-stopped
    command: celery -A src.core.celery worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://trading:trading123@db:5432/hedgefund
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - hedgefund-network

  # Task Scheduler (Celery Beat)
  scheduler:
    build: .
    container_name: hedgefund-scheduler
    restart: unless-stopped
    command: celery -A src.core.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://trading:trading123@db:5432/hedgefund
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - hedgefund-network

  # Real-time Data Ingestion
  data-ingestion:
    build: .
    container_name: hedgefund-data-ingestion
    restart: unless-stopped
    command: python -m src.ingest.realtime
    environment:
      - DATABASE_URL=postgresql://trading:trading123@db:5432/hedgefund
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - hedgefund-network

  # Risk Management System
  risk-manager:
    build: .
    container_name: hedgefund-risk-manager
    restart: unless-stopped
    command: python -m src.live.risk_manager
    environment:
      - DATABASE_URL=postgresql://trading:trading123@db:5432/hedgefund
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - hedgefund-network

  # Monitoring System
  monitoring:
    build: .
    container_name: hedgefund-monitoring
    restart: unless-stopped
    command: python -m src.live.monitoring
    environment:
      - DATABASE_URL=postgresql://trading:trading123@db:5432/hedgefund
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - hedgefund-network

  # Backup Service
  backup:
    build: .
    container_name: hedgefund-backup
    restart: "no"
    command: python scripts/backup.py
    environment:
      - DATABASE_URL=postgresql://trading:trading123@db:5432/hedgefund
      - BACKUP_S3_BUCKET=hedgefund-backups
      - BACKUP_RETENTION_DAYS=30
    depends_on:
      - db
    volumes:
      - ./backups:/app/backups
    networks:
      - hedgefund-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hedgefund-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - hedgefund-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  hedgefund-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
