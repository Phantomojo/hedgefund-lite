#!/bin/bash

# Forex Trading System - Quick Start Script
# Inspired by Vanta-ledger deployment approach

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="forex-trading-system"
DOCKER_COMPOSE_FILE="docker-compose.yml"
ENV_FILE=".env"
CONFIG_FILE="config/config.yml"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check if Docker is installed
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    # Check if Docker Compose is installed
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi
    
    # Check if Python is installed
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 is not installed. Please install Python 3 first."
        exit 1
    fi
    
    # Check Python version
    PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
    REQUIRED_VERSION="3.11"
    
    if [ "$(printf '%s\n' "$REQUIRED_VERSION" "$PYTHON_VERSION" | sort -V | head -n1)" != "$REQUIRED_VERSION" ]; then
        print_error "Python 3.11 or higher is required. Current version: $PYTHON_VERSION"
        exit 1
    fi
    
    print_success "Prerequisites check passed"
}

# Function to create environment file
create_env_file() {
    print_status "Creating environment file..."
    
    if [ ! -f "$ENV_FILE" ]; then
        cat > "$ENV_FILE" << EOF
# Forex Trading System Environment Variables
# Generated by quick_start.sh

# Environment
ENVIRONMENT=development
DEBUG=true
LOG_LEVEL=INFO

# Database
DATABASE_URL=postgresql://trading:trading@postgres:5432/forex_trading
REDIS_URL=redis://redis:6379

# Broker (OANDA Demo)
BROKER_NAME=oanda
BROKER_ENVIRONMENT=practice
BROKER_API_KEY=your_oanda_api_key_here
BROKER_API_SECRET=your_oanda_secret_here
BROKER_ACCOUNT_ID=your_oanda_account_id_here
BROKER_BASE_URL=https://api-fxpractice.oanda.com

# Security
SECURITY_SECRET_KEY=$(openssl rand -hex 32)
SECURITY_ALGORITHM=HS256
SECURITY_ACCESS_TOKEN_EXPIRE_MINUTES=30

# Monitoring
MONITORING_LOG_LEVEL=INFO
MONITORING_LOG_FILE=./logs/trading.log

# ML/AI
ML_MODEL_DIR=./models
ML_EXPERIMENT_TRACKING=mlflow

# External Services (optional)
NEWS_API_KEY=
SENTIMENT_API_KEY=
ECONOMIC_CALENDAR_API_KEY=
EOF
        print_success "Environment file created: $ENV_FILE"
    else
        print_warning "Environment file already exists: $ENV_FILE"
    fi
}

# Function to create necessary directories
create_directories() {
    print_status "Creating necessary directories..."
    
    mkdir -p logs
    mkdir -p data
    mkdir -p models
    mkdir -p backups
    mkdir -p uploads
    mkdir -p config/grafana/dashboards
    mkdir -p config/grafana/datasources
    mkdir -p monitoring
    
    print_success "Directories created"
}

# Function to create monitoring configuration
create_monitoring_config() {
    print_status "Creating monitoring configuration..."
    
    # Create Prometheus configuration
    cat > monitoring/prometheus.yml << EOF
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

scrape_configs:
  - job_name: 'forex-trading-system'
    static_configs:
      - targets: ['api:8000']
    metrics_path: '/metrics'
    scrape_interval: 5s

  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres:5432']

  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
EOF
    
    # Create Grafana datasource configuration
    cat > config/grafana/datasources/datasource.yml << EOF
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
EOF
    
    print_success "Monitoring configuration created"
}

# Function to build and start services
start_services() {
    print_status "Building and starting services..."
    
    # Build the Docker image
    print_status "Building Docker image..."
    docker build -t $PROJECT_NAME .
    
    # Start services with Docker Compose
    print_status "Starting services with Docker Compose..."
    docker-compose -f $DOCKER_COMPOSE_FILE up -d
    
    print_success "Services started successfully"
}

# Function to wait for services to be ready
wait_for_services() {
    print_status "Waiting for services to be ready..."
    
    # Wait for PostgreSQL
    print_status "Waiting for PostgreSQL..."
    until docker-compose -f $DOCKER_COMPOSE_FILE exec -T postgres pg_isready -U trading; do
        sleep 2
    done
    
    # Wait for Redis
    print_status "Waiting for Redis..."
    until docker-compose -f $DOCKER_COMPOSE_FILE exec -T redis redis-cli ping; do
        sleep 2
    done
    
    # Wait for API service
    print_status "Waiting for API service..."
    until curl -f http://localhost:8000/health > /dev/null 2>&1; do
        sleep 5
    done
    
    print_success "All services are ready"
}

# Function to initialize database
initialize_database() {
    print_status "Initializing database..."
    
    # Run database migrations
    docker-compose -f $DOCKER_COMPOSE_FILE exec -T api python -m alembic upgrade head
    
    # Initialize default data
    docker-compose -f $DOCKER_COMPOSE_FILE exec -T api python -m src.scripts.init_data
    
    print_success "Database initialized"
}

# Function to run tests
run_tests() {
    print_status "Running tests..."
    
    # Run unit tests
    docker-compose -f $DOCKER_COMPOSE_FILE exec -T api pytest tests/unit/ -v
    
    # Run integration tests
    docker-compose -f $DOCKER_COMPOSE_FILE exec -T api pytest tests/integration/ -v
    
    print_success "Tests completed"
}

# Function to show service status
show_status() {
    print_status "Service Status:"
    
    echo ""
    echo "Services:"
    docker-compose -f $DOCKER_COMPOSE_FILE ps
    
    echo ""
    echo "Access URLs:"
    echo "  API Documentation: http://localhost:8000/docs"
    echo "  Health Check: http://localhost:8000/health"
    echo "  Dashboard: http://localhost:3000"
    echo "  Grafana: http://localhost:3001 (admin/admin)"
    echo "  Prometheus: http://localhost:9090"
    echo "  pgAdmin: http://localhost:8080"
    echo "  Mongo Express: http://localhost:8081"
    
    echo ""
    echo "Logs:"
    echo "  View logs: docker-compose -f $DOCKER_COMPOSE_FILE logs -f"
    echo "  Stop services: docker-compose -f $DOCKER_COMPOSE_FILE down"
    echo "  Restart services: docker-compose -f $DOCKER_COMPOSE_FILE restart"
}

# Function to show next steps
show_next_steps() {
    echo ""
    print_success "Forex Trading System is now running!"
    echo ""
    echo "Next steps:"
    echo "1. Configure your broker API credentials in $ENV_FILE"
    echo "2. Access the API documentation at http://localhost:8000/docs"
    echo "3. Set up your trading strategies in the dashboard"
    echo "4. Configure risk management parameters"
    echo "5. Start with paper trading before going live"
    echo ""
    echo "Important security notes:"
    echo "- Change the default SECURITY_SECRET_KEY in $ENV_FILE"
    echo "- Set up proper authentication and authorization"
    echo "- Configure monitoring and alerting"
    echo "- Set up backup and recovery procedures"
    echo ""
    echo "For more information, see the README.md file"
}

# Main execution
main() {
    echo "ðŸš€ Forex Trading System - Quick Start"
    echo "====================================="
    echo ""
    
    # Check if running in the correct directory
    if [ ! -f "docker-compose.yml" ]; then
        print_error "Please run this script from the project root directory"
        exit 1
    fi
    
    # Run setup steps
    check_prerequisites
    create_env_file
    create_directories
    create_monitoring_config
    start_services
    wait_for_services
    initialize_database
    
    # Optional: run tests
    if [ "$1" = "--with-tests" ]; then
        run_tests
    fi
    
    show_status
    show_next_steps
}

# Handle command line arguments
case "${1:-}" in
    --help|-h)
        echo "Usage: $0 [OPTIONS]"
        echo ""
        echo "Options:"
        echo "  --with-tests    Run tests after setup"
        echo "  --help, -h      Show this help message"
        echo ""
        echo "This script will:"
        echo "  1. Check prerequisites"
        echo "  2. Create environment file"
        echo "  3. Create necessary directories"
        echo "  4. Set up monitoring configuration"
        echo "  5. Build and start services"
        echo "  6. Initialize database"
        echo "  7. Show service status and next steps"
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac
