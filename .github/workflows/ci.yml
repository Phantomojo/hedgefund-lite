name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # 🔍 Code Quality & Security
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 bandit safety mypy
        
    - name: 🎨 Code formatting check (Black)
      run: black --check --diff src/ tests/ scripts/
      
    - name: 📝 Import sorting check (isort)
      run: isort --check-only --diff src/ tests/ scripts/
      
    - name: 🔍 Linting (Flake8)
      run: flake8 src/ tests/ scripts/ --max-line-length=88 --extend-ignore=E203,W503
      
    - name: 🛡️ Security scan (Bandit)
      run: bandit -r src/ -f json -o bandit-report.json || true
      
    - name: 🔒 Dependency security scan (Safety)
      run: safety check --json --output safety-report.json || true
      
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # 🧪 Testing
  test:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: trading123
          POSTGRES_USER: trading
          POSTGRES_DB: hedgefund_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock
        
    - name: 🧪 Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://trading:trading123@localhost:5432/hedgefund_test
        REDIS_URL: redis://localhost:6379/0
        
    - name: 🧪 Run integration tests
      run: |
        pytest tests/integration/ -v --cov=src --cov-append
      env:
        DATABASE_URL: postgresql://trading:trading123@localhost:5432/hedgefund_test
        REDIS_URL: redis://localhost:6379/0
        
    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml
        retention-days: 30
        
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 🐳 Docker Build & Test
  docker:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'hedgefund-lite:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 🏗️ Build Docker image
      run: |
        docker build -t hedgefund-lite:latest .
        
    - name: 🧪 Test Docker image
      run: |
        docker run --rm hedgefund-lite:latest python -c "import sys; print('Python version:', sys.version)"
        docker run --rm hedgefund-lite:latest python -c "import src; print('Application imports successfully')"

  # 🚀 Performance Testing
  performance:
    name: 🚀 Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: 🚀 Run performance tests
      run: |
        python scripts/test_production_system.py
        python scripts/test_complete_system.py
        
    - name: 📊 Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          api_test_results.json
          stress_test_results.json
          system_status_report.json
        retention-days: 30

  # 📋 Documentation Check
  docs:
    name: 📋 Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Check documentation links
      run: |
        # Check for broken links in markdown files
        find . -name "*.md" -exec grep -l "http" {} \; | xargs -I {} sh -c 'echo "Checking {}"; grep -o "http[^ ]*" {} | head -5'
        
    - name: 📊 Generate documentation coverage
      run: |
        echo "Documentation files found:"
        find . -name "*.md" | wc -l
        echo "Code files found:"
        find src/ -name "*.py" | wc -l

  # 🎯 Final Status
  status:
    name: 🎯 Build Status
    runs-on: ubuntu-latest
    needs: [code-quality, test, docker, performance, docs]
    if: always()
    
    steps:
    - name: 📊 Generate status report
      run: |
        echo "## 🚀 CI/CD Pipeline Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Testing | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | ${{ needs.performance.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.docs.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
